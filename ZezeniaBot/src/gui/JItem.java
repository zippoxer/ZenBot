/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.Item;
import com.google.common.primitives.Ints;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import settings.Constants;

/**
 *
 * @author Moshe Revah
 */
public class JItem extends javax.swing.JPanel {

    private static JPopupMenu menu;
    private static Item selectedItem;
    private static MouseListener menuListener;

    static {
        initMenu();
    }
    
    private static int[] spriteChangingStackables = new int[]{
        395, 605, 611, 617, 2014, 2020, 2026, 2032, 2038, 2044, 2050, 2056, 2062,
        436, 1193, 1244, 1451,};

    private static void initMenu() {
        menu = new JPopupMenu();

        JMenuItem use = new JMenuItem("Use");
        use.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    selectedItem.use();
                } catch (IOException ex) {
                    Logger.getLogger(JContainer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        menu.add(use);
        
        JMenuItem look = new JMenuItem("Look");
        look.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    selectedItem.look();
                } catch (IOException ex) {
                    Logger.getLogger(JContainer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        menu.add(look);
        
        // Init menuListener.
        menuListener = new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                popup(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                popup(e);
            }

            private void popup(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    JItem src = ((JItem) e.getSource());
                    selectedItem = src.getItem();
                    menu.show(src, e.getX(), e.getY());
                }
            }
        };
    }
    
    private Item item;
    private Image sprite;

    public JItem() {
        initComponents();
        addMouseListener(menuListener);
    }

    public JItem(Item item) {
        this();
        wrap(item);
    }

    public void wrap(Item item) {
        this.item = item;
        int spriteID = item.id;
        if (Ints.contains(spriteChangingStackables, spriteID)) {
            if (item.count < 5) {
                spriteID += item.count - 1;
            } else if (item.count < 20) {
                spriteID += 4;
            } else {
                spriteID += 5;
            }
        }
        try {
            sprite = ImageIO.read(new File(System.getenv("APPDATA"), Constants.APP_NAME + "/sprites/" + spriteID + ".png"));
        } catch (IOException ex) {
            try {
                sprite = ImageIO.read(new File(System.getenv("APPDATA"), Constants.APP_NAME + "/sprites/missing.png"));
            } catch (IOException ex1) {
                Logger.getLogger(JItem.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }

    public Item getItem() {
        return item;
    }

    @Override
    public void paintComponent(Graphics g) {
        if (item != null) {
            g.drawImage(sprite, 0, 0, null);
            if (item.count > 1) {
                g.setFont(new Font("Arial", Font.BOLD, 12));
                g.setColor(Color.black);
                g.drawString(String.valueOf(item.count), 2, 26);
                g.drawString(String.valueOf(item.count), 2, 24);
                g.drawString(String.valueOf(item.count), 0, 26);
                g.drawString(String.valueOf(item.count), 0, 24);
                g.setColor(Color.white);
                g.drawString(String.valueOf(item.count), 1, 25);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(9999, 9999));
        setMinimumSize(new java.awt.Dimension(32, 32));
        setPreferredSize(new java.awt.Dimension(32, 32));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
