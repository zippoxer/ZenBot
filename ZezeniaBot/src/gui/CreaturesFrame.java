/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.Client;
import client.Entity;
import client.Map;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import settings.Constants;
import structures.Directions;

/**
 *
 * @author Radek
 */
public class CreaturesFrame extends javax.swing.JFrame {

    private static CreaturesFrame _instance;
    private DefaultListModel listModel = new DefaultListModel();

    /**
     * Creates new form CreaturesFrame
     */
    public CreaturesFrame() {
        _instance = this;
        initComponents();
        setLocationRelativeTo(null);
        init();
        setVisible(true);
    }

    public static CreaturesFrame getInstance() {
        return _instance;
    }

    private void init() {
        refresh();
    }
    
    public void update(final Entity entity) {
        SwingUtilities.invokeLater(new Runnable(){public void run(){
          doUpdate(entity);
        }});
    }
    
    private void doUpdate(Entity entity) {
        if (entity.name.equals(Client.getInstance().getCharacter().name))
            return;
        
        String[] models = new String[listModel.size()];
        listModel.copyInto(models);
        boolean found = false;
        if (models.length > 0) {
            for (int i = 0; i < models.length; i++) {
                String element = (String) models[i];
                if (entity.id == extractID(element)) {
                    String updated = elementToString(entity);
                    listModel.set(i, updated);
                    found = true;
                    break;
                }
            }
        }
        if (!found)
            listModel.addElement(elementToString(entity));
        
        creatureList.revalidate();
        creatureList.repaint();
    }
    
    public void remove(final Entity e) {
        SwingUtilities.invokeLater(new Runnable(){public void run(){
            doRemove(e);
        }});
    }
    
    private void doRemove(Entity e) {       
        listModel.removeElement(getElementById(e.id));
        
        creatureList.revalidate();
        creatureList.repaint();
    }
    
    private String getElementById(int id) {
        String[] models = new String[listModel.size()];
        listModel.copyInto(models);
        for (int i = 0; i < models.length; i++) {
            String[] temp = models[i].split(" ");
            if (id == Integer.parseInt(temp[0]))
                return models[i];
        }
        return null;
    }
    
    private String elementToString(Entity e) {
        String newElement = e.id + " ";
        switch (e.direction) {
            case Directions.NORTH:
                newElement+= "^";
                break;
            case Directions.EAST:
                newElement += ">";
                break;
            case Directions.SOUTH:
                newElement += "V";
                break;
            case Directions.WEST:
                newElement += "<";
                break;
            default:
                break;
        }
        newElement += " " + e.name + " " + e.health + "%";
        if (e.isAttacked() || e.isFollowed()) {
            newElement = newElement + " ";
            if (e.isAttacked()) {
                newElement += "X";
            }
            if (e.isFollowed()) {
                newElement += "F";
            }
        }
        return newElement;
    }

    public void refresh() {
        //Load the creatures table into the listModel.
        listModel.clear();
        for (Entity e : Map.getInstance().getEntities()) {
            if (!e.name.equals(Client.getInstance().getCharacter().name)) {
                String temp = elementToString(e);
                listModel.addElement(temp);
            }
        }
    }
    
    public int extractID(String input) {
        String[] temp = input.split(" ");
        return Integer.parseInt(temp[0]);
    }

    @Override
    public void dispose() {
        handleWindowClosing(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPopup = new javax.swing.JPopupMenu();
        popupAttack = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        creatureList = new javax.swing.JList();

        listPopup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                handleAttack(evt);
            }
        });

        popupAttack.setText("Attack");
        popupAttack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                handleAttacked(evt);
            }
        });
        listPopup.add(popupAttack);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Creatures");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                handleWindowClosing(evt);
            }
        });

        creatureList.setModel(listModel);
        creatureList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        creatureList.setComponentPopupMenu(listPopup);
        jScrollPane1.setViewportView(creatureList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void handleWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_handleWindowClosing
        MainFrame.getInstance().checkBoxCreatures.setSelected(false);
        setVisible(false);
        _instance = null;

    }//GEN-LAST:event_handleWindowClosing

    private void handleAttack(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handleAttack
    }//GEN-LAST:event_handleAttack

    private void handleAttacked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handleAttacked
        String selec = (String) creatureList.getSelectedValue();
        String[] temp = selec.split(" ");
        Entity creature = Map.getInstance().getEntityByID(Integer.parseInt(temp[0]));
        if (creature != null) {
            try {
                creature.attack();
            } catch (IOException ex) {
                Logger.getLogger(CreaturesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_handleAttacked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JList creatureList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu listPopup;
    private javax.swing.JMenuItem popupAttack;
    // End of variables declaration//GEN-END:variables
}
